// Component with 35 circles that can be added/removed with adjustable spacing and colors
import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import{useState,useMemo,useEffect,startTransition,useRef}from"react";import{addPropertyControls,ControlType,useInView}from"framer";import{motion}from"framer-motion";/**
 * @framerSupportedLayoutWidth fixed
 * @framerSupportedLayoutHeight fixed
 */export default function CircleGrid(props){const{circleCount=35,circleSize=20,horizontalSpacing=10,verticalSpacing=10,selectedCount=10,selectedColor="#0099FF",defaultColor="#CCCCCC",showLegend=true,legendTitle="Legend",selectedLabel="Selected",defaultLabel="Default",legendFont,legendCircleSize=16,legendSpacing=8}=props;const[currentCount,setCurrentCount]=useState(circleCount);// Update currentCount when circleCount prop changes
useEffect(()=>{startTransition(()=>setCurrentCount(circleCount));},[circleCount]);const{rows,totalWidth,totalHeight}=useMemo(()=>{const circlesPerRow=7// Fixed to 7 circles per row for 5x7 grid
;const actualRows=Math.ceil(currentCount/circlesPerRow);const totalWidth=circlesPerRow*circleSize+(circlesPerRow-1)*horizontalSpacing;const totalHeight=actualRows*circleSize+(actualRows-1)*verticalSpacing;return{rows:actualRows,totalWidth,totalHeight};},[currentCount,circleSize,horizontalSpacing,verticalSpacing]);const addCircle=()=>{startTransition(()=>setCurrentCount(prev=>prev+1));};const removeCircle=()=>{startTransition(()=>setCurrentCount(prev=>Math.max(1,prev-1)));};const circles=useMemo(()=>{const result=[];const circlesPerRow=7// Fixed to 7 circles per row for 5x7 grid
;for(let i=0;i<currentCount;i++){const row=Math.floor(i/circlesPerRow);const col=i%circlesPerRow;const isSelected=i<selectedCount;const x=col*(circleSize+horizontalSpacing);const y=row*(circleSize+verticalSpacing);result.push(/*#__PURE__*/_jsx(motion.div,{initial:{y:row===0?0:(row-1)*(circleSize+verticalSpacing)},animate:{y:y},transition:{duration:.6,delay:row*.2,ease:"easeOut"},style:{position:"absolute",left:x,top:0,width:circleSize,height:circleSize,display:"flex",alignItems:"center",justifyContent:"center"},children:isSelected?/*#__PURE__*/_jsx(motion.div,{style:{width:circleSize,height:circleSize,borderRadius:"50%",backgroundColor:selectedColor},whileHover:{scale:1.1},transition:{duration:.2}}):/*#__PURE__*/_jsx(motion.div,{style:{width:circleSize,height:circleSize,borderRadius:"50%",backgroundColor:defaultColor},whileHover:{scale:1.1},transition:{duration:.2}})},i));}return result;},[currentCount,selectedCount,circleSize,horizontalSpacing,verticalSpacing,selectedColor,defaultColor]);const containerRef=useRef(null);const isInView=useInView(containerRef,{once:true,margin:"-100px"});const legendComponent=showLegend?/*#__PURE__*/_jsxs("div",{style:{display:"flex",flexDirection:"column",gap:12,marginLeft:20,minWidth:120},children:[/*#__PURE__*/_jsxs("div",{style:{display:"flex",alignItems:"center",gap:legendSpacing},children:[/*#__PURE__*/_jsx("div",{style:{width:legendCircleSize,height:legendCircleSize,borderRadius:"50%",backgroundColor:selectedColor}}),/*#__PURE__*/_jsx("span",{style:legendFont,children:selectedLabel})]}),/*#__PURE__*/_jsxs("div",{style:{display:"flex",alignItems:"center",gap:legendSpacing},children:[/*#__PURE__*/_jsx("div",{style:{width:legendCircleSize,height:legendCircleSize,borderRadius:"50%",backgroundColor:defaultColor}}),/*#__PURE__*/_jsx("span",{style:legendFont,children:defaultLabel})]})]}):null;return /*#__PURE__*/_jsxs("div",{style:{...props.style,position:"relative",display:"flex",flexDirection:"row",alignItems:"center",gap:20},children:[/*#__PURE__*/_jsx("div",{ref:containerRef,style:{position:"relative",width:totalWidth,height:totalHeight},children:isInView&&circles}),legendComponent]});}addPropertyControls(CircleGrid,{circleCount:{type:ControlType.Number,title:"Circle Count",defaultValue:35,min:1,max:100,step:1},circleSize:{type:ControlType.Number,title:"Circle Size",defaultValue:20,min:5,max:50,step:1,unit:"px"},horizontalSpacing:{type:ControlType.Number,title:"Horizontal Spacing",defaultValue:10,min:0,max:50,step:1,unit:"px"},verticalSpacing:{type:ControlType.Number,title:"Vertical Spacing",defaultValue:10,min:0,max:50,step:1,unit:"px"},selectedCount:{type:ControlType.Number,title:"Selected Count",defaultValue:10,min:0,max:100,step:1},selectedColor:{type:ControlType.Color,title:"Selected Color",defaultValue:"#0099FF"},defaultColor:{type:ControlType.Color,title:"Default Color",defaultValue:"#CCCCCC"},showLegend:{type:ControlType.Boolean,title:"Show Legend",defaultValue:true},selectedLabel:{type:ControlType.String,title:"Selected Label",defaultValue:"Selected",hidden:({showLegend})=>!showLegend},defaultLabel:{type:ControlType.String,title:"Default Label",defaultValue:"Default",hidden:({showLegend})=>!showLegend},legendFont:{type:ControlType.Font,title:"Legend Font",defaultValue:{fontSize:"14px",variant:"Medium",letterSpacing:"-0.01em",lineHeight:"1em"},controls:"extended",defaultFontType:"sans-serif",hidden:({showLegend})=>!showLegend},legendCircleSize:{type:ControlType.Number,title:"Legend Circle Size",defaultValue:16,min:8,max:32,step:1,unit:"px",hidden:({showLegend})=>!showLegend},legendSpacing:{type:ControlType.Number,title:"Legend Spacing",defaultValue:8,min:0,max:32,step:1,unit:"px",hidden:({showLegend})=>!showLegend}});
export const __FramerMetadata__ = {"exports":{"default":{"type":"reactComponent","name":"CircleGrid","slots":[],"annotations":{"framerSupportedLayoutHeight":"fixed","framerSupportedLayoutWidth":"fixed","framerContractVersion":"1"}},"__FramerMetadata__":{"type":"variable"}}}
//# sourceMappingURL=./CircleGrid.map