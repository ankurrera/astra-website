// Animated pie chart with 4 adjustable sections, legend, and scroll-triggered animations
import{jsx as _jsx,jsxs as _jsxs}from"react/jsx-runtime";import{useRef,useMemo,useState,useEffect,startTransition}from"react";import{addPropertyControls,ControlType,useInView}from"framer";/**
 * Pie Chart with 4 customizable sections and legend
 *
 * @framerSupportedLayoutWidth any-prefer-fixed
 * @framerSupportedLayoutHeight any-prefer-fixed
 */export default function PieChart(props){const{section1Value=25,section1Color="#0099FF",section1Label="Section 1",section2Value=30,section2Color="#8855FF",section2Label="Section 2",section3Value=20,section3Color="#FF5588",section3Label="Section 3",section4Value=25,section4Color="#22CC66",section4Label="Section 4",chartSize=200,holeSize=60,gapSize=2,legendFont,showLegend=true,holeTextSize=24,legendTextColor="#333333",legendPosition="bottom",legendGap=20,legendTopGap=0,legendItemGap=8,legendBallGap=8,legendBallSize=12,legendNumberColor="#666666"}=props;const chartRef=useRef(null);const isInView=useInView(chartRef,{once:true});const[visibleSections,setVisibleSections]=useState(0);const sections=useMemo(()=>[{value:section1Value,color:section1Color,label:section1Label},{value:section2Value,color:section2Color,label:section2Label},{value:section3Value,color:section3Color,label:section3Label},{value:section4Value,color:section4Color,label:section4Label}],[section1Value,section1Color,section1Label,section2Value,section2Color,section2Label,section3Value,section3Color,section3Label,section4Value,section4Color,section4Label]);useEffect(()=>{if(isInView){// Animate sections appearing one by one
sections.forEach((_,index)=>{setTimeout(()=>{startTransition(()=>{setVisibleSections(prev=>Math.max(prev,index+1));});},.2*1e3*index);});}},[isInView,sections]);const{paths,total}=useMemo(()=>{const total=sections.reduce((sum,section)=>sum+section.value,0);if(total===0)return{paths:[],total:0};const center=chartSize/2;const outerRadius=(chartSize-20)/2;const innerRadius=holeSize/2;let currentAngle=-90// Start from top
;// Filter out sections with zero values
const validSections=sections.filter(section=>section.value>0);if(validSections.length===0)return{paths:[],total:0};// Calculate gap angle in degrees - only for valid sections
const gapAngle=validSections.length>1?gapSize*360/(2*Math.PI*outerRadius):0;const totalGapAngle=gapAngle*validSections.length;const availableAngle=360-totalGapAngle;const paths=validSections.map((section,index)=>{const percentage=section.value/total;const angle=Math.max(.1,percentage*availableAngle)// Minimum angle to ensure visibility
;const startAngle=currentAngle+(index>0?gapAngle:0);const endAngle=startAngle+angle;// Calculate thickness based on section value
const minThickness=20;const maxThickness=outerRadius-innerRadius;const thicknessRange=maxThickness-minThickness;const normalizedValue=section.value/Math.max(...validSections.map(s=>s.value));const thickness=minThickness+normalizedValue*thicknessRange;const sectionOuterRadius=innerRadius+thickness;// Convert to radians
const startRad=startAngle*Math.PI/180;const endRad=endAngle*Math.PI/180;// Calculate outer arc points
const x1Outer=center+sectionOuterRadius*Math.cos(startRad);const y1Outer=center+sectionOuterRadius*Math.sin(startRad);const x2Outer=center+sectionOuterRadius*Math.cos(endRad);const y2Outer=center+sectionOuterRadius*Math.sin(endRad);// Calculate inner arc points
const x1Inner=center+innerRadius*Math.cos(startRad);const y1Inner=center+innerRadius*Math.sin(startRad);const x2Inner=center+innerRadius*Math.cos(endRad);const y2Inner=center+innerRadius*Math.sin(endRad);const largeArcFlag=angle>180?1:0;const pathData=[`M ${x1Outer} ${y1Outer}`,`A ${sectionOuterRadius} ${sectionOuterRadius} 0 ${largeArcFlag} 1 ${x2Outer} ${y2Outer}`,`L ${x2Inner} ${y2Inner}`,`A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${x1Inner} ${y1Inner}`,"Z"].join(" ");currentAngle=endAngle+gapAngle;return{path:pathData,color:section.color,label:section.label,value:section.value,percentage:Math.round(percentage*100),index};});return{paths,total};},[sections,chartSize,holeSize,gapSize]);return /*#__PURE__*/_jsxs("div",{ref:chartRef,style:{...props.style,display:"flex",flexDirection:legendPosition==="bottom"?"column":"row",alignItems:legendPosition==="bottom"?"center":"flex-start",gap:`${legendGap}px`},children:[/*#__PURE__*/_jsxs("div",{style:{position:"relative",width:chartSize,height:chartSize},children:[/*#__PURE__*/_jsx("svg",{width:chartSize,height:chartSize,style:{transform:"rotate(0deg)"},children:paths.map((pathData,index)=>/*#__PURE__*/_jsx("path",{d:pathData.path,fill:pathData.color,stroke:"transparent",strokeWidth:1,style:{transition:`all 0.8s ease-in-out ${.2*index}s`,opacity:1,transform:index<visibleSections?"scale(1)":"scale(0)",transformOrigin:`${chartSize/2}px ${chartSize/2}px`}},index))}),/*#__PURE__*/_jsx("div",{style:{position:"absolute",top:"50%",left:"50%",width:holeSize,height:holeSize,backgroundColor:"transparent",borderRadius:"50%",transform:"translate(-50%, -50%)",border:"2px solid transparent",display:"flex",alignItems:"center",justifyContent:"center"},children:/*#__PURE__*/_jsx("span",{style:{fontSize:`${holeTextSize}px`,fontWeight:"bold",color:"#333333",textAlign:"center"},children:total})})]}),showLegend&&/*#__PURE__*/_jsx("div",{style:{display:"flex",flexDirection:"column",gap:`${legendItemGap}px`,alignItems:"flex-start",marginTop:`${legendTopGap}px`},children:paths.map((pathData,index)=>/*#__PURE__*/_jsxs("div",{style:{display:"flex",alignItems:"center",gap:`${legendBallGap}px`},children:[/*#__PURE__*/_jsx("div",{style:{width:`${legendBallSize}px`,height:`${legendBallSize}px`,backgroundColor:pathData.color,borderRadius:"50%",flexShrink:0}}),/*#__PURE__*/_jsxs("span",{style:{...legendFont,color:legendTextColor,whiteSpace:"nowrap"},children:[pathData.label," ",/*#__PURE__*/_jsx("span",{style:{color:legendNumberColor},children:pathData.value})]})]},index))})]});}addPropertyControls(PieChart,{section1Value:{type:ControlType.Number,title:"Section 1 Value",defaultValue:25,min:0,max:100,step:1},section1Color:{type:ControlType.Color,title:"Section 1 Color",defaultValue:"#0099FF"},section1Label:{type:ControlType.String,title:"Section 1 Label",defaultValue:"Section 1"},section2Value:{type:ControlType.Number,title:"Section 2 Value",defaultValue:30,min:0,max:100,step:1},section2Color:{type:ControlType.Color,title:"Section 2 Color",defaultValue:"#8855FF"},section2Label:{type:ControlType.String,title:"Section 2 Label",defaultValue:"Section 2"},section3Value:{type:ControlType.Number,title:"Section 3 Value",defaultValue:20,min:0,max:100,step:1},section3Color:{type:ControlType.Color,title:"Section 3 Color",defaultValue:"#FF5588"},section3Label:{type:ControlType.String,title:"Section 3 Label",defaultValue:"Section 3"},section4Value:{type:ControlType.Number,title:"Section 4 Value",defaultValue:25,min:0,max:100,step:1},section4Color:{type:ControlType.Color,title:"Section 4 Color",defaultValue:"#22CC66"},section4Label:{type:ControlType.String,title:"Section 4 Label",defaultValue:"Section 4"},chartSize:{type:ControlType.Number,title:"Chart Size",defaultValue:200,min:100,max:400,step:10,unit:"px"},holeSize:{type:ControlType.Number,title:"Hole Size",defaultValue:60,min:20,max:120,step:5,unit:"px"},gapSize:{type:ControlType.Number,title:"Gap Size",defaultValue:2,min:0,max:10,step:.5,unit:"px"},showLegend:{type:ControlType.Boolean,title:"Show Legend",defaultValue:true,enabledTitle:"Show",disabledTitle:"Hide"},legendFont:{type:ControlType.Font,title:"Legend Font",defaultValue:{fontSize:"14px",variant:"Medium",letterSpacing:"-0.01em",lineHeight:"1.2em"},controls:"extended",defaultFontType:"sans-serif"},holeTextSize:{type:ControlType.Number,title:"Hole Text Size",defaultValue:24,min:12,max:48,step:2,unit:"px"},legendTextColor:{type:ControlType.Color,title:"Legend Text Color",defaultValue:"#333333"},legendPosition:{type:ControlType.Enum,title:"Legend Position",defaultValue:"bottom",options:["bottom","right"]},legendGap:{type:ControlType.Number,title:"Legend Gap",defaultValue:20,min:0,max:50,step:1,unit:"px"},legendTopGap:{type:ControlType.Number,title:"Legend Top Gap",defaultValue:0,min:0,max:50,step:1,unit:"px"},legendItemGap:{type:ControlType.Number,title:"Legend Item Gap",defaultValue:8,min:0,max:20,step:1,unit:"px"},legendBallGap:{type:ControlType.Number,title:"Legend Ball Gap",defaultValue:8,min:0,max:20,step:1,unit:"px"},legendBallSize:{type:ControlType.Number,title:"Legend Ball Size",defaultValue:12,min:6,max:24,step:1,unit:"px"},legendNumberColor:{type:ControlType.Color,title:"Legend Number Color",defaultValue:"#666666"}});
export const __FramerMetadata__ = {"exports":{"default":{"type":"reactComponent","name":"PieChart","slots":[],"annotations":{"framerSupportedLayoutWidth":"any-prefer-fixed","framerContractVersion":"1","framerSupportedLayoutHeight":"any-prefer-fixed"}},"__FramerMetadata__":{"type":"variable"}}}
//# sourceMappingURL=./PieChart_1.map